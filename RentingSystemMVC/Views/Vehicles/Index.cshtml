@model List<RentingSystemMVC.Models.AuthorisedVehicleView>

@functions {

    public string GetImagePath(string model)
    {
        return $"/images/{model}.png";
    }

}

<div class="text-center vehicle-intro pt-5 pb-5">
    <h1 class="vehicle-intro-text">The world is yours.</h1>
</div>
<div class="container mt-5">
    <h3>Available Vehicles</h3>

    <form method="get" asp-action="Index" class="container d-flex justify-content-between" style="margin: 0; padding: 0;">
        <div class="col-sm-3" style="margin-left: 0; padding-left: 0;">
            <label for="filterColumn">Filter By:</label>
            <select id="filterColumn" name="filterColumn" class="form-select">
                <option value="brand">Brand</option>
                <option value="model">Model</option>
                <option value="type">Type</option>
                <option value="fuelType">Fuel Type</option>
                <option value="fuelCapacity">Fuel Capacity</option>
                <option value="seats">Seats</option>
                <option value="trunkSpace">Trunk Space</option>
                <option value="rentalCostPerDay">Rental Cost Per Day</option>
            </select>
        </div>

        <div class="col-sm-3">
            <label for="filterValue">Value:</label>
            <input type="text" id="filterValue" name="filterValue" class="form-control"/>
        </div>

        <div class="col-sm-3">
            <label for="selectedDate">Date:</label>
            <input type="date" id="selectedDate" name="selectedDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" value="@DateTime.Now.ToString("yyyy-MM-dd")" class="form-control"/>
        </div>

        <button type="submit" class="btn btn-primary col-sm-1 filter-button">Filter</button>


    </form>
    
    @foreach (var vehiclecard in Model)
    {
        <div class="card card-rent mt-4">
        <div class="d-flex">
            <img src="@GetImagePath(vehiclecard.Model)" class="col-sm-2" alt="car">
            <div class="col-sm-2 d-flex flex-column justify-content-evenly" style="padding-left: 10px">
                <div class="brand-name">
                    <span class="card-label">Name: </span>
                    <p>@vehiclecard.Brand @vehiclecard.Model</p>
                </div>
                <div class="license-plate">
                    <span class="card-label">License Number:</span>
                    <p>@vehiclecard.LicensePlate</p>
                </div>
            </div>
            <div class="col-sm-2 d-flex flex-column justify-content-evenly ">
                <div class="license-to-operate">
                    <span class="card-label">License to Operate: </span>
                    <p>@vehiclecard.LicenseToOperate</p>
                </div>
                <div class="car-type">
                    <span class="card-label">Type:</span>
                    <p>@vehiclecard.Type</p>
                </div>
            </div>
            <div class="col-sm-2 d-flex flex-column justify-content-evenly ">
                <div class="fuel-capacity">
                    <span class="card-label">Fuel Capacity: </span>
                    <p>@vehiclecard.FuelCapacity</p>
                </div>
                <div class="fuel-type">
                    <span class="card-label">Fuel Type:</span>
                    <p>@vehiclecard.FuelType</p>
                </div>
            </div>
            <div class="col-sm-2 d-flex flex-column justify-content-evenly ">
                <div class="trunk-space">
                    <span class="card-label">Trunk Space:</span>
                    <p>@vehiclecard.TrunkSpace</p>
                </div>
                <div class="seat-no">
                    <span class="card-label">Seats:</span>
                    <p>@vehiclecard.Seats</p>
                </div>
            </div>
            <div class="col-sm-1 d-flex flex-column justify-content-center">
                <div class="cost">
                    <p>
                        <span>@vehiclecard.RentalCostPerDay</span>
                    </p>
                </div>
            </div>
            @if (User.Identity.IsAuthenticated && vehiclecard.IsUserAuthorized == true)
            {
                <button type="button" class="btn btn-dark col-sm-1" onclick="openRentModal(@vehiclecard.VehicleID, @vehiclecard.RentalCostPerDay)">Rent</button>
            }
            else
            {
                <button type="button" class="btn btn-dark col-sm-1 rent-button" disabled>Rent</button>
            }
            
                
            </div>
        </div>
    }

    <!-- Rent Modal -->
    <div class="modal fade" id="rentModal" tabindex="-1" role="dialog" aria-labelledby="rentModalLabel" aria-hidden="true">
        <div class="modal-dialog" role="document">
            <div class="modal-content">
                <div class="modal-header">
                    <h5 class="modal-title" id="rentModalLabel">Rent Vehicle</h5>
                    <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close"></button>
                </div>
                <div class="modal-body">
                    <form id="rentForm">
                        <input type="hidden" id="vehicleID" name="vehicleID"/>
                        <input type="hidden" id="rentalCostPerDay" name="rentalCostPerDay"/>
                        <div class="form-group">
                            <label for="startRentalDate">Start Date</label>
                            <input type="date" class="form-control" id="startRentalDate" name="startRentalDate" min="@DateTime.Now.ToString("yyyy-MM-dd")" required/>
                        </div>
                        <div class="form-group mt-1">
                            <label for="endRentalDate">End Date</label>
                            <input type="date" class="form-control" id="endRentalDate" name="endRentalDate" min="@DateTime.Now.AddDays(1).ToString("yyyy-MM-dd")" required/>
                        </div>
                        <div class="form-group mt-1">
                            <label for="rentalAddress">Rental Address</label>
                            <input type="text" class="form-control" id="rentalAddress" name="rentalAddress" required/>
                        </div>
                        <div class="form-group mt-1">
                            <label for="rentalLot">Rental Lot</label>
                            <input type="number" class="form-control" id="rentalLot" name="rentalLot" required/>
                        </div>
                        <div class="form-group mt-1">
                            <label for="rentalAmount">Rental Amount</label>
                            <input type="text" class="form-control" id="rentalAmount" name="rentalAmount" readonly/>
                        </div>

                        <button type="submit" class="btn btn-primary mt-2">Rent</button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    @section Scripts {
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://cdn.jsdelivr.net/npm/popper.js@1.16.1/dist/umd/popper.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.min.js"></script>

        <script>
        document.addEventListener('DOMContentLoaded', (event) => {
            const startRentalDate = document.getElementById('startRentalDate');
            const endRentalDate = document.getElementById('endRentalDate');

            startRentalDate.addEventListener('change', () => {
                let startDate = new Date(startRentalDate.value);
                let minEndDate = new Date(startDate);
                minEndDate.setDate(minEndDate.getDate() + 1);

                let minEndDateString = minEndDate.toISOString().split('T')[0];
                endRentalDate.min = minEndDateString;

                if (new Date(endRentalDate.value) <= startDate) {
                    endRentalDate.value = minEndDateString;
                }
            });

            endRentalDate.addEventListener('change', () => {
                let startDate = new Date(startRentalDate.value);
                let endDate = new Date(endRentalDate.value);

                if (endDate <= startDate) {
                    endRentalDate.value = '';
                }
            });
        });


        function openRentModal(vehicleID, rentalCostPerDay) {
            $('#vehicleID').val(vehicleID);
            $('#rentalCostPerDay').val(rentalCostPerDay);
            $('#rentModal').modal('show');
        }

        $(document).ready(function () {
            $('#rentForm').on('submit', function (event) {
                event.preventDefault();
                var formData = $(this).serialize();

                // Check availability first
                $.ajax({
                    url: '@Url.Action("CheckAvailability", "Vehicles")',
                    type: 'POST',
                    data: formData,
                    success: function (response) {
                        if (response.available) {
                            // Proceed with rental if available
                            $.ajax({
                                url: '@Url.Action("RentVehicle", "Vehicles")',
                                type: 'POST',
                                data: formData,
                                success: function (response) {
                                    if (response.success) {
                                        alert('Vehicle rented successfully!');
                                        $('#rentModal').modal('hide');
                                        window.location.href = '@Url.Action("Index", "Rental")';
                                    } else {
                                        alert('Users are not allowed to double book on the same day');
                                    }
                                },
                                error: function () {
                                    alert('Error occurred while renting the vehicle.');
                                }
                            });
                        } else {
                            alert('The vehicle is not available for the selected dates.');
                        }
                    },
                    error: function () {
                        alert('Error occurred while checking availability.');
                    }
                });
            });

            $('#startRentalDate, #endRentalDate').on('change', function () {
                var startDate = new Date($('#startRentalDate').val());
                var endDate = new Date($('#endRentalDate').val());
                var rentalCostPerDay = parseFloat($('#rentalCostPerDay').val());

                if (startDate && endDate && startDate <= endDate && !isNaN(rentalCostPerDay)) {
                    var timeDiff = endDate.getTime() - startDate.getTime();
                    var daysDiff = Math.ceil(timeDiff / (1000 * 3600 * 24));

                    var rentalAmount = daysDiff * rentalCostPerDay;
                    $('#rentalAmount').val(rentalAmount.toFixed(2));
                } else {
                    $('#rentalAmount').val('');
                }
            });
        });
    </script>
    }

</div>